# This is the default config file, which is loaded with the Python configparser on module import.
# In addition to this default config file, the files ~/corpora/corpora.ini (where '~' is expanded
# to the user home directory) and corpora.ini in the current working directory are loaded (in that order)
# if they are present. Values specified in later files complement or overwrite values specified in earlier files.
# You can manually load more config files by using the load_config function. Specifying values in the [DEFAULT]
# section will overwrite the default values globally, also for sections/corpora specified in earlier files.
# This can for instance be used to change the default 'root' directory in which the corpora are stored.

# Note that for any value you may provide long multi-line descriptions by indenting after linebreaks. These may
# contain arbitrary characters. The only special character is '$', which is used to specify references to other
# sections and values as '${section:key}'. If you want to specify a literal '$' (e.g. for a regular expression) it has
# to be escaped: '$$'.

[DEFAULT]
# DEFAULT section: If a value is not specified in a particular corpus it will default to the value specified here.
# Not specifying a value is a valid option. The section [Name] should be a unique identifier to refer to that
# particular corpus when using load(corpus=Name) to load a corpus. The fields 'info', 'root' and 'path' have associated
# get methods (get_info, get_root, get_path), which do not return the literal values (e.g. the 'root' of a sub-corpus
# corresponds to the 'path' of its 'parent'). You can get the literal value of any field with the generic get method.

info
# [optional] A description of the corpus
# This info is available before actually accessing the corpus, so
# you should at least provide a short description with basic information.
# If 'info' is not explicitly specified, the get_info method will print a summary of all
# fields for this corpus.

root: ~/corpora
# [optional] Root directory to store the corpus in.
# This should be an absolute path, `~` is expanded to the user home.
# If a relative path is specified, a warning is issued and it is interpreted relative
# to the current working directory. The 'path' field determines the actual path and may
# overwrite 'root'. If 'parent' is non-empty, this field is ignored and instead the return
# value of get_path('parent') is used.

path
# [optional] Directory to store the corpus in.
# This can be an absolute path, in which case it replaces 'root'.
# It can be a relative path, in which case it is appended to 'root'.
# It can be empty, in which case the section/corpus [Name] is appended to 'root'.
# Note that for sub-corpora (with non-empty 'parent') 'root' is the return value of get_path('parent').
# The get_path method returns the resulting absolute path.

parent
# [optional] A parent corpus name.
# The parent corpus should be defined in a separate section.
# Initialisation (e.g. downloading from 'url' with 'access' method) is delegated to the parent corpus.

access
# [optional] How to access the corpus.
# Currently supported methods are: git, zip, tar.gz.

url
# [optional] URL to download the corpus from.

type
# [optional] the type of corpus
# currently supported types are: files, json

# KEY: VALUE
# you can specify additional key-value pairs, which the load function
# hands over as keyword arguments with string value to the read method


[ABC]
access: git
url: git@github.com:DCMLab/ABC.git

[ABC_labels]
parent: ABC
root: data/tsv
type: files
file_regex: ^.*\.tsv$$
file_type: tsv
tsv_time: totbeat
tsv_duration: length

[ABC_scores]
parent: ABC
root: data/mscx
type: files
file_regex: ^.*\.mscx$$
file_type: mscx

[Lakh_clean]
access: tar.gz
url: http://hog.ee.columbia.edu/craffel/lmd/clean_midi.tar.gz
type: files
file_regex: ^.*\.mid$$
file_type: midi

[iRealPro]
access: git
url: https://github.com/DCMLab/iRealPro.git
type: json
json_file: treebank.json
